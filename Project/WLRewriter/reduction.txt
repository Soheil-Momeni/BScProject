	 x -> IDENTIFIER 
l1
	 varlist -> x 
l1
	 c -> INL_KW varlist 
inL l1
	 clist -> c 
inL l1
	 x -> IDENTIFIER 
h1
	 varlist -> x 
h1
	 c -> INH_KW varlist 
inH h1
	 clist -> clist ; M c 
inL l1; inH h1
	 x -> IDENTIFIER 
h1
	 exp -> x 
h1
	 x -> IDENTIFIER 
l1
	 exp -> x 
l1
	 exp -> exp EQ_KW exp 
h1 == l1
	 x -> IDENTIFIER 
l1
	 x -> IDENTIFIER 
l1
	 exp -> x 
l1
	 n -> INTEGER_NUMBER 
1
	 exp -> n 
1
	 exp -> exp PLUS_KW exp 
l1 + 1
	 c -> x ASSIGN_KW exp 
l1 = l1 + 1
	 clist -> c 
l1 = l1 + 1
	 x -> IDENTIFIER 
l1
	 c -> OUTL_KW x 
outL l1
	 clist -> clist ; M c 
l1 = l1 + 1; outL l1
	 x -> IDENTIFIER 
l1
	 x -> IDENTIFIER 
l1
	 exp -> x 
l1
	 n -> INTEGER_NUMBER 
2
	 exp -> n 
2
	 exp -> exp MINUS_KW exp 
l1 - 2
	 c -> x ASSIGN_KW exp 
l1 = l1 - 2
	 clist -> c 
l1 = l1 - 2
	 x -> IDENTIFIER 
l1
	 c -> OUTL_KW x 
outL l1
	 clist -> clist ; M c 
l1 = l1 - 2; outL l1
	 c -> IF_KW exp THEN_KW M clist ELSE_KW N M clist ENDIF_KW 
 if h1 == l1 then l1 = l1 + 1; outL l1 else l1 = l1 - 2; outL l1 endif 
	 clist -> clist ; M c 
inL l1; inH h1;  if h1 == l1 then l1 = l1 + 1; outL l1 else l1 = l1 - 2; outL l1 endif 
	 x -> IDENTIFIER 
h1
	 c -> OUTH_KW x 
outH h1
	 clist -> clist ; M c 
inL l1; inH h1;  if h1 == l1 then l1 = l1 + 1; outL l1 else l1 = l1 - 2; outL l1 endif ; outH h1
	 x -> IDENTIFIER 
l1
	 c -> OUTL_KW x 
outL l1
	 clist -> clist ; M c 
inL l1; inH h1;  if h1 == l1 then l1 = l1 + 1; outL l1 else l1 = l1 - 2; outL l1 endif ; outH h1; outL l1
	 x -> IDENTIFIER 
l1
	 n -> INTEGER_NUMBER 
3
	 exp -> n 
3
	 c -> x ASSIGN_KW exp 
l1 = 3
	 clist -> clist ; M c 
inL l1; inH h1;  if h1 == l1 then l1 = l1 + 1; outL l1 else l1 = l1 - 2; outL l1 endif ; outH h1; outL l1; l1 = 3
	 x -> IDENTIFIER 
l1
	 c -> OUTL_KW x 
outL l1
	 clist -> clist ; M c 
inL l1; inH h1;  if h1 == l1 then l1 = l1 + 1; outL l1 else l1 = l1 - 2; outL l1 endif ; outH h1; outL l1; l1 = 3; outL l1
	 program -> PROGRAM_KW ';' clist 
###Hooray! - Your program is syntactically correct### 
program; inL l1; inH h1;  if h1 == l1 then l1 = l1 + 1; outL l1 else l1 = l1 - 2; outL l1 endif ; outH h1; outL l1; l1 = 3; outL l1
