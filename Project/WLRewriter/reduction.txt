	 c -> NOP_KW 
NOP
	 clist -> c 
NOP
	 x -> IDENTIFIER 
l1
	 x -> IDENTIFIER 
l2
	 x -> IDENTIFIER 
l3
	 varlist -> x 
l3
	 varlist -> x , varlist 
l2, l3
	 varlist -> x , varlist 
l1, l2, l3
	 c -> INL_KW varlist 
inL l1, l2, l3
	 clist -> clist ; M c 
NOP; inL l1, l2, l3
	 x -> IDENTIFIER 
l1
	 exp -> x 
l1
	 x -> IDENTIFIER 
l2
	 exp -> x 
l2
	 exp -> exp GT_KW exp 
l1 > l2
	 exp -> LPAR_KW exp RPAR_KW 
(l1 > l2)
	 x -> IDENTIFIER 
l3
	 exp -> x 
l3
	 x -> IDENTIFIER 
l2
	 exp -> x 
l2
	 exp -> exp MINUS_KW exp 
l3 - l2
	 exp -> LPAR_KW exp RPAR_KW 
(l3 - l2)
	 exp -> exp AND_KW exp 
(l1 > l2) and (l3 - l2)
	 exp -> LPAR_KW exp RPAR_KW 
((l1 > l2) and (l3 - l2))
	 exp -> NEG_KW exp 
!(((l1 > l2) and (l3 - l2)))
	 exp -> LPAR_KW exp RPAR_KW 
(!(((l1 > l2) and (l3 - l2))))
	 c -> NOP_KW 
NOP
	 clist -> c 
NOP
	 c -> IF_KW exp THEN_KW M clist ENDIF_KW 
 if (!(((l1 > l2) and (l3 - l2)))) then NOP endif
	 clist -> clist ; M c 
NOP; inL l1, l2, l3;  if (!(((l1 > l2) and (l3 - l2)))) then NOP endif
	 program -> PROGRAM_KW ';' clist 
###Hooray! - Your program is syntactically correct### 
program; NOP; inL l1, l2, l3;  if (!(((l1 > l2) and (l3 - l2)))) then NOP endif
